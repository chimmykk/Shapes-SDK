import fs from "fs";
import { createShapesClient } from "./client";

function coreAnalyzeImage(client: ReturnType<typeof createShapesClient>, model: string) {
  return async (imagePath: string, promptText = "What's in this image?") => {
    const buffer = fs.readFileSync(imagePath);
    const base64 = buffer.toString("base64");
    const dataUrl = `data:image/png;base64,${base64}`;

    const res = await client.chat.completions.create({
      model,
      messages: [
        {
          role: "user",
          content: [
            { type: "text", text: promptText },
            { type: "image_url", image_url: { url: dataUrl } },
          ],
        },
      ],
    });

    return res.choices[0].message.content;
  };
}

export function createAnalyzeImage(client: ReturnType<typeof createShapesClient>, defaultModel = "shapesinc/tenshi") {
  const analyzeImage = async (imagePath: string, promptText?: string, model = defaultModel) =>
    coreAnalyzeImage(client, model)(imagePath, promptText);

  analyzeImage.model = new Proxy(
    {},
    {
      get(_, modelName: string) {
        return coreAnalyzeImage(client, modelName);
      },
    }
  ) as {
    (imagePath: string, promptText?: string, model?: string): Promise<string>;
    model: { [key: string]: (imagePath: string, promptText?: string) => Promise<string> };
  };

  return analyzeImage;
}
