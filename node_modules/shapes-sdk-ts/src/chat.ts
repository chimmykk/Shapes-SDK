import { createShapesClient } from "./client";

type Message =
  | { role: "user"; content: string }
  | { role: "user"; content: { type: "text"; text: string } | { type: "audio"; audio: string } };

function coreSendMessage(client: ReturnType<typeof createShapesClient>, model: string) {
  return async (message: Message["content"]) => {
    let openaiContent: any;
    if (typeof message === "string") {
      openaiContent = message;
    } else if (message.type === "text") {
      openaiContent = [{ type: "text", text: message.text }];
    } else if (message.type === "audio") {
      openaiContent = [{ type: "audio", audio: message.audio }];
    } else {
      openaiContent = "";
    }

    const res = await client.chat.completions.create({
      model,
      messages: [{ role: "user", content: openaiContent }],
    });
    return res.choices[0].message.content;
  };
}

export function createSendMessage(client: ReturnType<typeof createShapesClient>, defaultModel = "shapesinc/shaperobot") {
  const sendMessage = async (message: Message["content"], model = defaultModel) =>
    coreSendMessage(client, model)(message);

  sendMessage.model = new Proxy(
    {},
    {
      get(_, modelName: string) {
        return coreSendMessage(client, modelName);
      },
    }
  ) as {
    (message: Message["content"], model?: string): Promise<string>;
    model: { [key: string]: (message: Message["content"]) => Promise<string> };
  };

  return sendMessage;
}
